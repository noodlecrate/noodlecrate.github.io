var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", 'angular2/core'], factory);
    }
})(function (require, exports) {
    var core_1 = require('angular2/core');
    var SortPipe = (function () {
        function SortPipe() {
        }
        SortPipe.prototype.transform = function (value, args) {
            var propertyName = args[0];
            if (propertyName[0] === "-") {
                propertyName = propertyName.substr(1);
            }
            var sortedValue = value.sort(function (a, b) {
                if (a[propertyName] < b[propertyName]) {
                    return -1;
                }
                else if (a[propertyName] > b[propertyName]) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            if (args[0][0] === "-") {
                sortedValue = sortedValue.reverse();
            }
            return sortedValue;
        };
        SortPipe = __decorate([
            core_1.Pipe({ name: 'sort',
                pure: false
            })
        ], SortPipe);
        return SortPipe;
    })();
    exports.SortPipe = SortPipe;
});
