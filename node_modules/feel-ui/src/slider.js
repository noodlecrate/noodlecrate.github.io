var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
(function (factory) {
    if (typeof module === 'object' && typeof module.exports === 'object') {
        var v = factory(require, exports); if (v !== undefined) module.exports = v;
    }
    else if (typeof define === 'function' && define.amd) {
        define(["require", "exports", "angular2/core"], factory);
    }
})(function (require, exports) {
    "use strict";
    var core_1 = require("angular2/core");
    var Slider = (function () {
        function Slider() {
            this.valueChange = new core_1.EventEmitter();
            this._offset = "20%";
            this._calculateOffset();
        }
        Slider.prototype._getOffset = function () {
            return this._offset;
        };
        Slider.prototype._calculateOffset = function () {
            this._offset = ((this.value / this.maximum) * 100).toString() + "%";
        };
        Slider.prototype._startDrag = function (event) {
            this._buttonElement = event.target;
            document.onmouseup = this._stopDrag.bind(this);
            document.onmousemove = this._handleDrag.bind(this);
        };
        Slider.prototype._handleDrag = function (event) {
            var element = this._buttonElement;
            var offsetTotal = this._buttonElement.offsetLeft;
            while (element = element.offsetParent) {
                if (!isNaN(element.offsetLeft)) {
                    offsetTotal += element.offsetLeft;
                }
            }
            var value = (event.pageX / this._buttonElement.parentElement.offsetWidth) * this.maximum;
            if (value < 0) {
                this.value = 0;
            }
            else if (value > this.maximum) {
                this.value = this.maximum;
            }
            else {
                this.value = value;
            }
            this._calculateOffset();
            this._buttonElement.style.left = this._offset;
            event.preventDefault();
            this.valueChange.next(this.value);
        };
        Slider.prototype._stopDrag = function () {
            document.onmouseup = null;
            document.onmousemove = null;
        };
        __decorate([
            core_1.Input(), 
            __metadata('design:type', Number)
        ], Slider.prototype, "value", void 0);
        __decorate([
            core_1.Output(), 
            __metadata('design:type', Object)
        ], Slider.prototype, "valueChange", void 0);
        __decorate([
            core_1.Input(), 
            __metadata('design:type', Number)
        ], Slider.prototype, "maximum", void 0);
        Slider = __decorate([
            core_1.Component({
                directives: [],
                selector: "feel-slider",
                template: "<div class=\"slider-track\">\n                  <div class=\"slider-button\" [style.left]=\"_getOffset()\" (mousedown)=\"_startDrag($event)\"></div>\n               </div>"
            }), 
            __metadata('design:paramtypes', [])
        ], Slider);
        return Slider;
    }());
    exports.Slider = Slider;
});
//# sourceMappingURL=slider.js.map