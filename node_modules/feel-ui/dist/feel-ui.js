(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.FeelUi = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
//Temporary work around for Angular2#4902
///<reference path="./node_modules/angular2/typings/browser.d.ts"/>
var button_1 = require("./src/button");
exports.ButtonComponent = button_1.ButtonComponent;
var menu_bar_1 = require("./src/menu-bar");
exports.MenuBar = menu_bar_1.MenuBar;
var menu_panel_1 = require("./src/menu-panel");
exports.MenuPanel = menu_panel_1.MenuPanel;
var input_1 = require("./src/input");
exports.InputComponent = input_1.InputComponent;
var notification_provider_1 = require("./src/notification-provider");
exports.NotificationProvider = notification_provider_1.NotificationProvider;
var table_1 = require("./src/table");
exports.TableComponent = table_1.TableComponent;
var slider_1 = require("./src/slider");
exports.Slider = slider_1.Slider;
},{"./src/button":3,"./src/input":4,"./src/menu-bar":5,"./src/menu-panel":6,"./src/notification-provider":7,"./src/slider":9,"./src/table":10}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("angular2/core");
var common_1 = require("angular2/common");
var ButtonComponent = (function () {
    function ButtonComponent() {
    }
    __decorate([
        core_1.Input()
    ], ButtonComponent.prototype, "flat", void 0);
    __decorate([
        core_1.Input()
    ], ButtonComponent.prototype, "text", void 0);
    ButtonComponent = __decorate([
        core_1.Component({
            directives: [common_1.NgClass],
            selector: "feel-button",
            template: "<button type='button' [ngClass]=\"{ 'btn-flat': flat }\" >{{text}}</button>"
        })
    ], ButtonComponent);
    return ButtonComponent;
})();
exports.ButtonComponent = ButtonComponent;
},{"angular2/common":2,"angular2/core":2}],4:[function(require,module,exports){
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("angular2/core");
var common_1 = require("angular2/common");
var InputComponent = (function () {
    function InputComponent() {
        this.multiline = false;
        this.valueChange = new core_1.EventEmitter();
        this._rows = 2;
    }
    InputComponent.prototype.onInput = function (event) {
        this.value = event;
        this.valueChange.emit(event);
        var rows = this.value.split("\n").length;
        if (rows < 2) {
            rows = 2;
        }
        this._rows = rows;
    };
    __decorate([
        core_1.Input()
    ], InputComponent.prototype, "label", void 0);
    __decorate([
        core_1.Input()
    ], InputComponent.prototype, "value", void 0);
    __decorate([
        core_1.Input()
    ], InputComponent.prototype, "multiline", void 0);
    __decorate([
        core_1.Output()
    ], InputComponent.prototype, "valueChange", void 0);
    InputComponent = __decorate([
        core_1.Component({
            directives: [common_1.NgClass, common_1.NgIf],
            selector: "feel-input",
            template: "<label>{{label}}</label>\n               <textarea *ngIf=\"multiline\" [ngModel]=value (ngModelChange)=\"onInput($event)\" [rows]=_rows></textarea>\n               <input *ngIf=\"!multiline\" type=\"text\" [ngModel]=value (ngModelChange)=\"onInput($event)\" />"
        })
    ], InputComponent);
    return InputComponent;
})();
exports.InputComponent = InputComponent;
},{"angular2/common":2,"angular2/core":2}],5:[function(require,module,exports){
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("angular2/core");
var button_1 = require("./button");
var menu_panel_1 = require("./menu-panel");
var MenuBar = (function () {
    function MenuBar() {
        this.isMenuOpen = false;
    }
    MenuBar.prototype.toggleMenuPanel = function () {
        this.isMenuOpen = !this.isMenuOpen;
    };
    MenuBar.prototype.onMenuClose = function () {
        this.isMenuOpen = false;
    };
    __decorate([
        core_1.Input()
    ], MenuBar.prototype, "title", void 0);
    MenuBar = __decorate([
        core_1.Component({
            directives: [button_1.ButtonComponent, menu_panel_1.MenuPanel],
            selector: "feel-menu-bar",
            template: "<feel-button [text]=\"'M'\" (click)=toggleMenuPanel()></feel-button>\n               <div class=\"title\">\n                <h1>{{title}}</h1>\n                </div>\n               <feel-menu-panel [open]=\"isMenuOpen\" (close)=\"onMenuClose()\"></feel-menu-panel>"
        })
    ], MenuBar);
    return MenuBar;
})();
exports.MenuBar = MenuBar;
},{"./button":3,"./menu-panel":6,"angular2/core":2}],6:[function(require,module,exports){
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("angular2/core");
var common_1 = require("angular2/common");
var button_1 = require("./button");
var router_1 = require('angular2/router');
var MenuPanel = (function () {
    function MenuPanel() {
        this.close = new core_1.EventEmitter();
    }
    MenuPanel.prototype.closeMenuPanel = function () {
        this.open = false;
        this.close.next(null);
    };
    __decorate([
        core_1.Input()
    ], MenuPanel.prototype, "open", void 0);
    MenuPanel = __decorate([
        core_1.Component({
            directives: [common_1.NgClass, button_1.ButtonComponent, router_1.RouterLink],
            selector: "feel-menu-panel",
            events: ['close'],
            template: "<div [ngClass]=\"{ 'show': open }\" >\n                  <div class=\"menu-title\">\n                    <h1>Menu</h1>\n                    <feel-button [text]=\"'X'\" (click)=closeMenuPanel()></feel-button>\n                  </div>\n                  <div class=\"menu-options\">\n                    <a [routerLink]=\"['/Home']\"><div class=\"menu-item\">Home</div></a>\n                    <a [routerLink]=\"['/Buttons']\"><div class=\"menu-item\">Button</div></a>\n                    <a [routerLink]=\"['/Input']\"><div class=\"menu-item\">Input</div></a>\n                    <a [routerLink]=\"['/Notifications']\"><div class=\"menu-item\">Notifications</div></a>\n                    <a [routerLink]=\"['/Table']\"><div class=\"menu-item\">Table</div></a>\n                    <a [routerLink]=\"['/Slider']\"><div class=\"menu-item\">Slider</div></a>\n                  </div>\n               </div>"
        })
    ], MenuPanel);
    return MenuPanel;
})();
exports.MenuPanel = MenuPanel;
},{"./button":3,"angular2/common":2,"angular2/core":2,"angular2/router":2}],7:[function(require,module,exports){
var NotificationProvider = (function () {
    function NotificationProvider() {
        this._notificationElement = document.getElementById("notification-stream");
        if (this._notificationElement === null) {
            this._notificationElement = document.createElement("div");
            this._notificationElement.id = "notification-stream";
            document.body.appendChild(this._notificationElement);
        }
    }
    NotificationProvider.prototype.showSuccess = function (title, message) {
        var newNotification = document.createElement("div");
        newNotification.className = "notification success";
        this._showNotification(newNotification, title, message);
    };
    NotificationProvider.prototype.showError = function (title, message) {
        var newNotification = document.createElement("div");
        newNotification.className = "notification error";
        this._showNotification(newNotification, title, message);
    };
    NotificationProvider.prototype._showNotification = function (notificationElement, title, message) {
        var _this = this;
        if (title) {
            notificationElement.innerHTML += "<div class='title'>" + title + "</div>";
        }
        if (message) {
            notificationElement.innerHTML += "<div class='message'>" + message + "</div>";
        }
        this._notificationElement.appendChild(notificationElement);
        setTimeout(function () {
            _this._notificationElement.removeChild(notificationElement);
        }, 5000);
    };
    return NotificationProvider;
})();
exports.NotificationProvider = NotificationProvider;
},{}],8:[function(require,module,exports){
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require('angular2/core');
var SortPipe = (function () {
    function SortPipe() {
    }
    SortPipe.prototype.transform = function (value, args) {
        var propertyName = args[0];
        if (propertyName[0] === "-") {
            propertyName = propertyName.substr(1);
        }
        var sortedValue = value.sort(function (a, b) {
            if (a[propertyName] < b[propertyName]) {
                return -1;
            }
            else if (a[propertyName] > b[propertyName]) {
                return 1;
            }
            else {
                return 0;
            }
        });
        if (args[0][0] === "-") {
            sortedValue = sortedValue.reverse();
        }
        return sortedValue;
    };
    SortPipe = __decorate([
        core_1.Pipe({ name: 'sort',
            pure: false
        })
    ], SortPipe);
    return SortPipe;
})();
exports.SortPipe = SortPipe;
},{"angular2/core":2}],9:[function(require,module,exports){
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("angular2/core");
var common_1 = require("angular2/common");
var Slider = (function () {
    function Slider() {
        this.valueChange = new core_1.EventEmitter();
        this._calculateOffset();
    }
    Slider.prototype._calculateOffset = function () {
        this._offset = ((this.value / this.maximum) * 100).toString() + "%";
    };
    Slider.prototype._startDrag = function (event) {
        this._buttonElement = event.target;
        document.onmouseup = this._stopDrag.bind(this);
        document.onmousemove = this._handleDrag.bind(this);
    };
    Slider.prototype._handleDrag = function (event) {
        var element = this._buttonElement;
        var offsetTotal = this._buttonElement.offsetLeft;
        while (element = element.offsetParent) {
            if (!isNaN(element.offsetLeft)) {
                offsetTotal += element.offsetLeft;
            }
        }
        var value = (event.pageX / this._buttonElement.parentElement.offsetWidth) * this.maximum;
        if (value < 0) {
            this.value = 0;
        }
        else if (value > this.maximum) {
            this.value = this.maximum;
        }
        else {
            this.value = value;
        }
        this._calculateOffset();
        this._buttonElement.style.left = this._offset;
        console.log(this.value);
        event.preventDefault();
        this.valueChange.emit(this.value);
    };
    Slider.prototype._stopDrag = function () {
        document.onmouseup = null;
        document.onmousemove = null;
    };
    __decorate([
        core_1.Input()
    ], Slider.prototype, "value", void 0);
    __decorate([
        core_1.Output()
    ], Slider.prototype, "valueChange", void 0);
    __decorate([
        core_1.Input()
    ], Slider.prototype, "maximum", void 0);
    Slider = __decorate([
        core_1.Component({
            directives: [common_1.NgClass],
            selector: "feel-slider",
            template: "<div class=\"slider-track\">\n                  <div class=\"slider-button\" [style.left]=\"_offset\" (mousedown)=\"_startDrag($event)\"></div>\n               </div>"
        })
    ], Slider);
    return Slider;
})();
exports.Slider = Slider;
},{"angular2/common":2,"angular2/core":2}],10:[function(require,module,exports){
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var core_1 = require("angular2/core");
var common_1 = require("angular2/common");
var sort_pipe_1 = require("./pipes/sort-pipe");
var TableComponent = (function () {
    function TableComponent() {
        this.sortOrder = "something";
        this.sortItems = ["something"];
    }
    TableComponent.prototype.addSort = function (propertyName) {
        if (this.sortOrder === propertyName) {
            this.sortOrder = "-" + propertyName;
        }
        else {
            this.sortOrder = propertyName;
        }
        this.sortItems[0] = this.sortOrder;
    };
    __decorate([
        core_1.Input()
    ], TableComponent.prototype, "data", void 0);
    __decorate([
        core_1.Input()
    ], TableComponent.prototype, "columns", void 0);
    TableComponent = __decorate([
        core_1.Component({
            directives: [common_1.NgClass],
            selector: "feel-table",
            pipes: [sort_pipe_1.SortPipe],
            //changeDetection: ChangeDetectionStrategy.OnPush,
            template: "<table>\n                  <thead>\n                     <th *ngFor=\"#column of columns\" (click)=addSort(column.propertyName)>\n                        <span>{{ column.propertyName }}</span>\n                        <span [ngClass]=\"{\n                                            'ascending': sortItems[0] === column.propertyName,\n                                            'descending': sortItems[0] === '-' + column.propertyName,\n                                            'sort-icon': true\n                                          }\" ></span>\n                     </th>\n                  </thead>\n                  <tbody>\n                     <tr *ngFor=\"#dataItem of data | sort: sortOrder\">\n                        <td *ngFor=\"#column of columns\">{{ dataItem[column.propertyName] }}</td>\n                     </tr>\n                  </tbody>\n               </table>"
        })
    ], TableComponent);
    return TableComponent;
})();
exports.TableComponent = TableComponent;
},{"./pipes/sort-pipe":8,"angular2/common":2,"angular2/core":2}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
